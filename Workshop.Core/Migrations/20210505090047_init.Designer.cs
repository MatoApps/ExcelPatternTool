// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Workshop.Core.DataBase;

namespace Workshop.Core.Migrations
{
    [DbContext(typeof(WorkshopDbContext))]
    [Migration("20210505090047_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Workshop.Core.Domains.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Batch")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dept")
                        .HasColumnType("TEXT");

                    b.Property<string>("IDCard")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobCate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Level")
                        .HasColumnType("TEXT");

                    b.Property<int>("Mounth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Proj")
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialNum")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Workshop.Core.Domains.EmployeeAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountBankAlias")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountBankLoc")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountBankName")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountNum")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SocialInsuranceNum")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("EmployeeAccount");
                });

            modelBuilder.Entity("Workshop.Core.Domains.EmployeeSalay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("AgeBonus")
                        .HasColumnType("REAL");

                    b.Property<double>("AttendanceDeduct")
                        .HasColumnType("REAL");

                    b.Property<double>("BasicSalary")
                        .HasColumnType("REAL");

                    b.Property<double>("Bonus1")
                        .HasColumnType("REAL");

                    b.Property<double>("Bonus2")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<double>("HolidayOvertime")
                        .HasColumnType("REAL");

                    b.Property<double>("HostelAllowances")
                        .HasColumnType("REAL");

                    b.Property<double>("MealAllowances")
                        .HasColumnType("REAL");

                    b.Property<double>("MonthlyAttendance")
                        .HasColumnType("REAL");

                    b.Property<double>("NightAllowances")
                        .HasColumnType("REAL");

                    b.Property<double>("OrdinaryOvertime")
                        .HasColumnType("REAL");

                    b.Property<double>("OtherAllowances")
                        .HasColumnType("REAL");

                    b.Property<double>("OtherDeduct")
                        .HasColumnType("REAL");

                    b.Property<double>("OtherRewards")
                        .HasColumnType("REAL");

                    b.Property<double>("ParttimeSalary")
                        .HasColumnType("REAL");

                    b.Property<double>("PerformanceBonus")
                        .HasColumnType("REAL");

                    b.Property<double>("PerformanceDeduct")
                        .HasColumnType("REAL");

                    b.Property<double>("PerformanceRewards")
                        .HasColumnType("REAL");

                    b.Property<double>("PostAllowance")
                        .HasColumnType("REAL");

                    b.Property<double>("ProbationSalary")
                        .HasColumnType("REAL");

                    b.Property<double>("QuarterlyAttendance")
                        .HasColumnType("REAL");

                    b.Property<double>("SalesBonus")
                        .HasColumnType("REAL");

                    b.Property<double>("SkillSalary")
                        .HasColumnType("REAL");

                    b.Property<double>("Sum")
                        .HasColumnType("REAL");

                    b.Property<double>("SumWithTemporaryTax")
                        .HasColumnType("REAL");

                    b.Property<double>("SupplementaryDeduct")
                        .HasColumnType("REAL");

                    b.Property<double>("SupplementaryRewards")
                        .HasColumnType("REAL");

                    b.Property<double>("TemporaryTax")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("SalayInfo");
                });

            modelBuilder.Entity("Workshop.Core.Domains.EmployeeSocialInsuranceAndFund", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("BeforeFillingOut")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<double>("PersonalIncomeTax")
                        .HasColumnType("REAL");

                    b.Property<double>("ProvidentFundPersonal")
                        .HasColumnType("REAL");

                    b.Property<double>("SocialInsurancePersonal")
                        .HasColumnType("REAL");

                    b.Property<double>("Sum")
                        .HasColumnType("REAL");

                    b.Property<double>("SupplementaryCommercialInsuranceDeduct")
                        .HasColumnType("REAL");

                    b.Property<double>("SupplementaryProvidentFundPersonal")
                        .HasColumnType("REAL");

                    b.Property<double>("SupplementarySocialInsurancePersonal")
                        .HasColumnType("REAL");

                    b.Property<double>("SupplementaryUnionFeeDeductPersonal")
                        .HasColumnType("REAL");

                    b.Property<double>("UnionFeePersonal")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("EmployeeSocialInsuranceAndFund");
                });

            modelBuilder.Entity("Workshop.Core.Domains.EmployeeSocialInsuranceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("BasicMedicalInsurance")
                        .HasColumnType("REAL");

                    b.Property<double>("BasicOldAgeInsurance")
                        .HasColumnType("REAL");

                    b.Property<double>("Check")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<double>("ProvidentFund")
                        .HasColumnType("REAL");

                    b.Property<double>("UnemploymentInsurance")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("EmployeeSocialInsuranceDetail");
                });

            modelBuilder.Entity("Workshop.Core.Domains.EnterpriseSocialInsuranceAndFund", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<double>("ProvidentFundEnterprise")
                        .HasColumnType("REAL");

                    b.Property<double>("SocialInsuranceEnterprise")
                        .HasColumnType("REAL");

                    b.Property<double>("Sum")
                        .HasColumnType("REAL");

                    b.Property<double>("SupplementaryProvidentFundEnterprise")
                        .HasColumnType("REAL");

                    b.Property<double>("SupplementarySocialInsuranceEnterprise")
                        .HasColumnType("REAL");

                    b.Property<double>("SupplementaryUnionFeeDeductEnterprise")
                        .HasColumnType("REAL");

                    b.Property<double>("UnionFeeEnterprise")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("EnterpriseSocialInsuranceAndFund");
                });

            modelBuilder.Entity("Workshop.Core.Domains.EmployeeAccount", b =>
                {
                    b.HasOne("Workshop.Core.Domains.Employee", "Employee")
                        .WithOne("EmployeeAccount")
                        .HasForeignKey("Workshop.Core.Domains.EmployeeAccount", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Workshop.Core.Domains.EmployeeSalay", b =>
                {
                    b.HasOne("Workshop.Core.Domains.Employee", "Employee")
                        .WithOne("EmployeeSalay")
                        .HasForeignKey("Workshop.Core.Domains.EmployeeSalay", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Workshop.Core.Domains.EmployeeSocialInsuranceAndFund", b =>
                {
                    b.HasOne("Workshop.Core.Domains.Employee", "Employee")
                        .WithOne("EmployeeSocialInsuranceAndFund")
                        .HasForeignKey("Workshop.Core.Domains.EmployeeSocialInsuranceAndFund", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Workshop.Core.Domains.EmployeeSocialInsuranceDetail", b =>
                {
                    b.HasOne("Workshop.Core.Domains.Employee", "Employee")
                        .WithOne("EmployeeSocialInsuranceDetail")
                        .HasForeignKey("Workshop.Core.Domains.EmployeeSocialInsuranceDetail", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Workshop.Core.Domains.EnterpriseSocialInsuranceAndFund", b =>
                {
                    b.HasOne("Workshop.Core.Domains.Employee", "Employee")
                        .WithOne("EnterpriseSocialInsuranceAndFund")
                        .HasForeignKey("Workshop.Core.Domains.EnterpriseSocialInsuranceAndFund", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Workshop.Core.Domains.Employee", b =>
                {
                    b.Navigation("EmployeeAccount");

                    b.Navigation("EmployeeSalay");

                    b.Navigation("EmployeeSocialInsuranceAndFund");

                    b.Navigation("EmployeeSocialInsuranceDetail");

                    b.Navigation("EnterpriseSocialInsuranceAndFund");
                });
#pragma warning restore 612, 618
        }
    }
}
